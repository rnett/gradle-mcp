name: Publish Docs
on:
  workflow_call: { }
  workflow_dispatch: { }
permissions:
  contents: write

concurrency:
  group: docs
  cancel-in-progress: false

jobs:
  deploy-docs:
    name: Deploy mkdocs docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - uses: actions/setup-python@v6
        with:
          python-version: 3.x
          cache: pip
          cache-dependency-path: "**/*requirements.txt"

      - run: pip install -r .github/workflows/mkdocs-requirements.txt

      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: ~/.cache
          restore-keys: |
            mkdocs-material-

      - name: Determine deploy alias
        id: determine-alias
        run: |
          version=$(cat version.txt)
          if [[ "$version" == *"-SNAPSHOT"* ]]; then
            echo "alias=snapshot" >> $GITHUB_OUTPUT
          else
            echo "alias=latest" >> $GITHUB_OUTPUT
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Get current docs
        run: git fetch origin gh-pages --depth=1

      - name: Show current mike versions
        run: |
          echo "Current mike versions:"
          mike list || echo "No docs site versions found (likely first deployment)"

      - name: Delete snapshots
        run: |
          echo "Deleting snapshot versions (if any)..."
          SNAPSHOTS=$(mike list 2>/dev/null | grep -Eo '[0-9A-Za-z._-]+-SNAPSHOT' | sort -u || true)
          if [ -z "$SNAPSHOTS" ]; then
            echo "No snapshot versions found."
          else
            for v in $SNAPSHOTS; do
              echo "Deleting snapshot version: $v"
              mike delete --push "$v" || echo "Warning: failed to delete $v (continuing)"
            done
          fi
          
      - name: Show remaining mike versions
        run: |
          echo "Remaining mike versions:"
          mike list || echo "No docs site versions found (likely first deployment)"
      - run: mike deploy --update-aliases --push ${{ steps.determine-alias.outputs.version }} ${{ steps.determine-alias.outputs.alias }}
      - run: mike set-default latest --push